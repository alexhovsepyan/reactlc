{"version":3,"sources":["componets/menu/Logo.js","componets/menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAnimation","logo","current","animate","transform","offset","duration","easing","delay","direction","fill","React","createRef","react_default","a","createElement","Link","to","className","onMouseEnter","ref","Component","MenuLeft","Logo_Logo","App","Menu_MenuLeft","Boolean","window","location","hostname","match","Root","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAGqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgBRQ,gBAAkB,WACHP,EAAKQ,KAAKC,QAClBC,QACH,CACE,CAAEC,UAAW,WAAaC,OAAQ,GAClC,CAAED,UAAW,aAAeC,OAAQ,IACpC,CAAED,UAAW,aAAeC,OAAQ,IACpC,CAAED,UAAW,WAAaC,OAAQ,IAEpC,CACEC,SAAU,IACVC,OAAQ,cACRC,MAAO,EACPC,UAAW,YACXC,KAAM,cA7BVjB,EAAKQ,KAAOU,IAAMC,YAFDnB,wEAMjB,OACIoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACJJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBAAmBC,aAAcvB,KAAKI,iBAC1Da,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBAAiBE,IAAKxB,KAAKK,MAAzC,KAGAY,EAAAC,EAAAC,cAAA,QAAMG,UAAU,wBAAhB,iBAb0BG,aCAbC,mLAEjB,OACET,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,6BANeG,aCWvBG,mLARX,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAACU,EAAD,cAJUJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACFlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACGnB,EAAAC,EAAAC,cAACkB,EAAD,OAIPC,IAASC,OAAOJ,EAAMK,SAASC,eAAe,SDoHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea73d02a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom'\n\nexport default class Logo extends Component {\n  constructor(props) {\n    super(props);\n    this.logo = React.createRef();\n  }\n\n  render() {\n    return (\n        <Link to='/'>\n             <div className=\"left-menu_header\" onMouseEnter={this.handleAnimation}>\n        <h1 className=\"left-menu_logo\" ref={this.logo}>\n          V\n        </h1>\n        <span className=\"left-menu_logo__desc\">Vahe</span>\n      </div>\n        </Link>\n    );\n  }\n  handleAnimation = () => {\n    const logo = this.logo.current;\n    logo.animate(\n      [\n        { transform: \"scale(1)\",  offset: 0 },\n        { transform: \"scale(1.3)\",  offset: 0.2 },\n        { transform: \"scale(1.2)\",  offset: 0.4 },\n        { transform: \"scale(1)\",  offset: 1 }\n      ],\n      {\n        duration: 1000,\n        easing: \"ease-in-out\",\n        delay: 0,\n        direction: \"alternate\",\n        fill: \"forwards\"\n      }\n    );\n  };\n}\n","import React, { Component } from \"react\";\nimport Logo from './Logo'\n\nexport default class MenuLeft extends Component {\n  render() {\n    return (\n      <div className='left-menu'>\n        <Logo />\n        <div className='left-menu_content'></div>\n        <div className='left-menu_footer'></div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport MenuLeft from './componets/menu/Menu';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <MenuLeft/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Root = (\n    <BrowserRouter>\n       <App /> \n    </BrowserRouter>\n)\n\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}